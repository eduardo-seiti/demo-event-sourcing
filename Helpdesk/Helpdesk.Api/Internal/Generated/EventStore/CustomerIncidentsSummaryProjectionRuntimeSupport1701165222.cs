// <auto-generated/>
#pragma warning disable
using Helpdesk.Api.Incidents.GetCustomerIncidentsSummary;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: CustomerIncidentsSummaryProjectionLiveAggregation1701165222
    public class CustomerIncidentsSummaryProjectionLiveAggregation1701165222 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary>
    {
        private readonly Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummaryProjection _customerIncidentsSummaryProjection;

        public CustomerIncidentsSummaryProjectionLiveAggregation1701165222(Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummaryProjection customerIncidentsSummaryProjection)
        {
            _customerIncidentsSummaryProjection = customerIncidentsSummaryProjection;
        }



        public override Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary snapshot)
        {
            if (!events.Any()) return null;
            Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary customerIncidentsSummary = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary Apply(Marten.Events.IEvent @event, Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentClosed> event_IncidentClosed4:
                    _customerIncidentsSummaryProjection.Apply(event_IncidentClosed4.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentLogged> event_IncidentLogged1:
                    _customerIncidentsSummaryProjection.Apply(event_IncidentLogged1.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentResolved> event_IncidentResolved2:
                    _customerIncidentsSummaryProjection.Apply(event_IncidentResolved2.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.ResolutionAcknowledgedByCustomer> event_ResolutionAcknowledgedByCustomer3:
                    _customerIncidentsSummaryProjection.Apply(event_ResolutionAcknowledgedByCustomer3.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: CustomerIncidentsSummaryProjectionLiveAggregation1701165222
    
    
    // START: CustomerIncidentsSummaryProjectionInlineHandler1701165222
    public class CustomerIncidentsSummaryProjectionInlineHandler1701165222 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid> _storage;
        private readonly Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummaryProjection _customerIncidentsSummaryProjection;

        public CustomerIncidentsSummaryProjectionInlineHandler1701165222(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid> storage, Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummaryProjection customerIncidentsSummaryProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _customerIncidentsSummaryProjection = customerIncidentsSummaryProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary, System.Guid> slice, Marten.Events.IEvent evt, Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentClosed> event_IncidentClosed8:
                    aggregate ??= CreateDefault(evt);
                    _customerIncidentsSummaryProjection.Apply(event_IncidentClosed8.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentLogged> event_IncidentLogged5:
                    aggregate ??= CreateDefault(evt);
                    _customerIncidentsSummaryProjection.Apply(event_IncidentLogged5.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.IncidentResolved> event_IncidentResolved6:
                    aggregate ??= CreateDefault(evt);
                    _customerIncidentsSummaryProjection.Apply(event_IncidentResolved6.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.Incidents.ResolutionAcknowledgedByCustomer> event_ResolutionAcknowledgedByCustomer7:
                    aggregate ??= CreateDefault(evt);
                    _customerIncidentsSummaryProjection.Apply(event_ResolutionAcknowledgedByCustomer7.Data, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public Helpdesk.Api.Incidents.GetCustomerIncidentsSummary.CustomerIncidentsSummary Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: CustomerIncidentsSummaryProjectionInlineHandler1701165222
    
    
}

